# -*- coding: utf-8 -*-
"""cafe_mocha_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgPI8Hpn4NpViPZsEQ7vDIWfRQBtrDKB
"""

# cafe_mocha_dashboard.py

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# 1. Setup
st.set_page_config(page_title="Cafe Mocha Financial Insights", layout="wide")

# 2. Load Dataset
@st.cache_data
def load_data():
    df = pd.read_csv("Cafe_Mocha_Financial_Data.csv")
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month_Year'] = df['Date'].dt.to_period('M').astype(str)
    df['Season'] = df['Date'].dt.month % 12 // 3 + 1
    df['Season'] = df['Season'].map({1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Fall'})
    df['Month'] = df['Date'].dt.month
    return df

df = load_data()

# Sidebar
page = st.sidebar.radio("Navigate", ["Home", "Financial Insights"])

# 3. Home Page
if page == "Home":
    st.title("â˜• Welcome to Cafe Mocha's Financial Dashboard")
    st.image("https://images.unsplash.com/photo-1509042239860-f550ce710b93", use_column_width=True)
    st.markdown("""
        Welcome to the interactive analytics portal for **Cafe Mocha**.
        Here you'll find visual insights about revenue, expenses, profit trends, and customer footfall.

        Use the sidebar to navigate through financial visuals. â˜•ðŸ“ˆ
    """)

# 4. Financial Insights Page
elif page == "Financial Insights":
    st.title("Cafe Mocha Financial Insights")

    # Total customers served
    total_customers = int(df['Customer_Footfall'].sum())
    avg_profit = df['Profit'].mean()
    min_profit = df['Profit'].min()

    if avg_profit < 0:
        summary = f"Business is operating at a **loss**, average monthly loss is ${abs(avg_profit):.2f}."
    elif avg_profit < 2000:
        summary = f"Profit margins are **low**, with average monthly profit of ${avg_profit:.2f}."
    else:
        summary = f"Cafe Mocha is **profitable**, average monthly profit is ${avg_profit:.2f}."

    st.metric("ðŸ‘£ Total Customers Served", f"{total_customers}")
    st.metric("ðŸ“‰ Lowest Monthly Profit", f"${min_profit}")
    st.success(summary)

    # Expense Pie Chart
    st.subheader("Expense Distribution")
    expense_cols = ['Marketing_Spend', 'Food_Costs', 'Labor_Costs', 'Rent', 'Utilities']
    expense_sum = df[expense_cols].sum().reset_index()
    expense_sum.columns = ['Expense', 'Total']
    fig1 = px.pie(expense_sum, names='Expense', values='Total', title="Total Expense Breakdown", hole=0.4)
    st.plotly_chart(fig1, use_container_width=True)

    # Profit Histogram
    st.subheader("Profit Distribution")
    fig2 = px.histogram(df, x='Profit', nbins=30, title="Distribution of Monthly Profit", marginal='box')
    st.plotly_chart(fig2, use_container_width=True)

    # Monthly Profit Trend
    st.subheader("Monthly Profit Trend")
    profit_monthly = df.groupby('Month_Year')['Profit'].sum().reset_index()
    fig3 = px.line(profit_monthly, x='Month_Year', y='Profit', markers=True, title="Monthly Profit Over Time")
    fig3.update_traces(line=dict(color='green'))
    st.plotly_chart(fig3, use_container_width=True)

    # Good vs Bad Months (Bar)
    st.subheader("Average Profit by Month")
    month_names = {1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"}
    df['Month_Name'] = df['Month'].map(month_names)
    avg_profit_month = df.groupby('Month_Name')['Profit'].mean().reindex(list(month_names.values())).reset_index()
    fig4 = px.bar(avg_profit_month, x='Month_Name', y='Profit', title="Good vs Bad Months", color='Profit',
                  color_continuous_scale='RdYlGn')
    st.plotly_chart(fig4, use_container_width=True)

    # Revenue vs Expenses Trend
    st.subheader("Revenue vs Total Expenses")
    rev_exp = df.groupby('Month_Year')[['Revenue', 'Total_Expenses']].sum().reset_index()
    fig5 = go.Figure()
    fig5.add_trace(go.Scatter(x=rev_exp['Month_Year'], y=rev_exp['Revenue'], mode='lines+markers', name='Revenue'))
    fig5.add_trace(go.Scatter(x=rev_exp['Month_Year'], y=rev_exp['Total_Expenses'], mode='lines+markers', name='Expenses'))
    fig5.update_layout(title='Monthly Revenue vs Expenses', xaxis_title='Month', yaxis_title='Amount ($)')
    st.plotly_chart(fig5, use_container_width=True)

    # Profit by Season
    st.subheader("Seasonal Profit Trends")
    seasonal = df.groupby('Season')['Profit'].mean().reset_index()
    fig6 = px.bar(seasonal, x='Season', y='Profit', color='Profit', title="Average Profit by Season",
                  color_continuous_scale='Bluered')
    st.plotly_chart(fig6, use_container_width=True)

    # Customer Footfall Trend
    st.subheader("Customer Footfall Trend")
    footfall = df.groupby('Month_Year')['Customer_Footfall'].sum().reset_index()
    fig7 = px.area(footfall, x='Month_Year', y='Customer_Footfall', title="Monthly Customer Footfall",
                   line_shape='spline')
    st.plotly_chart(fig7, use_container_width=True)