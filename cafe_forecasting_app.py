# -*- coding: utf-8 -*-
"""cafe_forecasting_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LVnS8Q9c5xY0VBdbA7TI4bgdCjEUoFZP
"""

pip install streamlit plotly

# cafe_forecasting_app.py

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error
from statsmodels.tsa.statespace.sarimax import SARIMAX
from pandas.tseries.offsets import DateOffset

# Set config
st.set_page_config(page_title="Cafe Mocha Forecasting", layout="wide")
st.title("📈 Cafe Mocha: 3-Year Financial Forecasting Dashboard")

# Load and process data
@st.cache_data
def load_data():
    df = pd.read_csv("Cafe_Mocha_Financial_Data.csv")
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values('Date')
    df['Month_Year'] = df['Date'].dt.to_period('M').astype(str)
    df['Season'] = df['Date'].dt.month % 12 // 3 + 1
    df['Season'] = df['Season'].map({1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Fall'})
    return df

df = load_data()

# Sidebar Navigation
model_option = st.sidebar.radio("Choose Forecasting Method:", ["📅 Time Series Forecast (SARIMA)", "📊 Regression-Based Forecasting"])

# SARIMA MODEL
if model_option == "📅 Time Series Forecast (SARIMA)":
    st.subheader("📅 SARIMA - Seasonal Profit Forecasting")

    # Monthly profit
    df_monthly = df.set_index('Date').resample('MS').sum()
    profit_series = df_monthly['Profit']
    train = profit_series.iloc[:-6]

    model = SARIMAX(train, order=(1,1,1), seasonal_order=(1,1,1,12), enforce_stationarity=False, enforce_invertibility=False)
    results = model.fit(disp=False)

    future_dates = [profit_series.index[-1] + DateOffset(months=x) for x in range(1, 37)]
    forecast = results.get_forecast(steps=36)
    forecast_mean = forecast.predicted_mean
    forecast_ci = forecast.conf_int()

    # Plot
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=profit_series.index, y=profit_series, mode='lines+markers', name='Actual Profit'))
    fig.add_trace(go.Scatter(x=future_dates, y=forecast_mean, mode='lines+markers', name='Forecasted Profit', line=dict(dash='dash')))
    fig.add_trace(go.Scatter(x=future_dates, y=forecast_ci.iloc[:, 0], name='Lower Bound', line=dict(width=0), showlegend=False))
    fig.add_trace(go.Scatter(x=future_dates, y=forecast_ci.iloc[:, 1], name='Upper Bound', fill='tonexty', fillcolor='rgba(0,100,80,0.2)', line=dict(width=0), showlegend=False))
    fig.update_layout(title="SARIMA Forecast - Cafe Mocha Profit (Next 3 Years)", xaxis_title="Date", yaxis_title="Profit ($)")
    st.plotly_chart(fig, use_container_width=True)

    st.success(f"📊 Avg Forecasted Profit: ${forecast_mean.mean():.2f} | Trend: {'📉 Decreasing' if forecast_mean.iloc[-1] < forecast_mean.iloc[0] else '📈 Increasing'}")

# REGRESSION MODEL
elif model_option == "📊 Regression-Based Forecasting":
    st.subheader("📊 Predict Profit Using Business Features (Regression)")

    features = ['Customer_Footfall', 'Marketing_Spend', 'Food_Costs', 'Labor_Costs', 'Rent', 'Utilities', 'Revenue', 'Delivery_Ratio', 'DineIn_Ratio']
    df_reg = df.dropna(subset=features + ['Profit'])  # Clean missing
    X = df_reg[features]
    y = df_reg['Profit']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    st.markdown("#### 💡 Model Metrics")
    st.write(f"R² Score: `{r2_score(y_test, y_pred):.2f}`")
    st.write(f"Mean Absolute Error: `${mean_absolute_error(y_test, y_pred):.2f}`")

    st.markdown("#### 📍 Feature Coefficients")
    coeff_df = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
    st.dataframe(coeff_df.style.background_gradient(cmap='RdYlGn'))

    st.markdown("#### 🔮 Predict Profit for Custom Input")
    input_data = {}
    for col in features:
        input_data[col] = st.number_input(f"{col}", value=float(df[col].mean()))
    input_df = pd.DataFrame([input_data])
    pred_profit = model.predict(input_df)[0]
    st.success(f"📈 Predicted Profit: **${pred_profit:.2f}**")

