# -*- coding: utf-8 -*-
"""cafe_mocha_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GbetrW5cIwD3Z37r_VJTu8zcCCiR1UhZ
"""

# cafe_mocha_dashboard.py

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from statsmodels.tsa.statespace.sarimax import SARIMAX
from pandas.tseries.offsets import DateOffset
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from xgboost import XGBRegressor
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# Page configuration
st.set_page_config(page_title="Cafe Mocha Financial Dashboard", layout="wide")

# Load cleaned dataset
df = pd.read_csv("Cafe_Mocha_Cleaned.csv")
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')

# Images for home (ensure these are in the same directory or hosted online)
st.sidebar.image("Screenshot 2025-04-18 at 1.25.22\u202fAM.png", use_column_width=True)

# Page navigation
page = st.sidebar.radio("Navigation", ["Home", "Financial Insights", "Forecast & Prediction"])

# ------------------------ HOME PAGE ------------------------ #
if page == "Home":
    st.title("Welcome to Cafe Mocha")
    st.markdown("""
    **Cafe Mocha**, founded in 2019, has become a cozy destination for thousands of customers seeking warm beverages, vibrant ambience, and a welcoming smile. Since its inception, we've served over **{} customers** and counting.

    The vision and heartbeat behind this venture is **Mrs. Harsha Ingale**, a passionate entrepreneur who believes in the power of good coffee and great conversations.

    This dashboard is designed to reflect on our journey so far, providing insights into our financial trends, operational efficiency, and future outlook.
    """.format(int(df['Customer_Footfall'].sum())))

    st.image("Screenshot 2025-04-18 at 1.25.22\u202fAM.png", caption="Cafe Mocha Moments", use_column_width=True)

# ------------------- FINANCIAL INSIGHTS PAGE ------------------- #
elif page == "Financial Insights":
    st.title("Financial Insights & Trends")
    df_monthly = df.resample('MS', on='Date').sum()

    st.subheader("Monthly Revenue vs Expenses")
    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(x=df_monthly.index, y=df_monthly['Revenue'], mode='lines+markers', name='Revenue', line=dict(color='deepskyblue')))
    fig1.add_trace(go.Scatter(x=df_monthly.index, y=df_monthly['Total_Expenses'], mode='lines+markers', name='Expenses', line=dict(color='dodgerblue')))
    fig1.update_layout(xaxis_title='Date', yaxis_title='Amount ($)', template='plotly_white')
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("Key Observations")
    st.markdown("""
    - Revenue spikes are typically observed during the winter and holiday seasons.
    - Notable cost increases in Q1 2021 and Q2 2023 due to expansion efforts.
    - Expense fluctuations are often driven by seasonal labor and marketing campaigns.
    - Sustained revenue growth despite operational volatility is a positive indicator.
    """)

# ---------------- FORECAST & PREDICTION PAGE ---------------- #
elif page == "Forecast & Prediction":
    st.title("Financial Forecast & Business Recommendations")

    # Time Series Forecasting for Profit
    df_monthly = df.resample('MS', on='Date').sum()
    profit_series = df_monthly['Profit']
    sarima_model = SARIMAX(profit_series, order=(1,1,1), seasonal_order=(1,1,1,12), enforce_stationarity=False, enforce_invertibility=False)
    sarima_result = sarima_model.fit(disp=False)
    forecast = sarima_result.get_forecast(steps=36)
    forecast_mean = forecast.predicted_mean
    forecast_ci = forecast.conf_int()
    future_dates = pd.date_range(start=profit_series.index[-1] + DateOffset(months=1), periods=36, freq='MS')

    # Plot Forecast
    fig2 = go.Figure()
    fig2.add_trace(go.Scatter(x=profit_series.index, y=profit_series.values, name='Historical Profit', mode='lines+markers', line=dict(color='green')))
    fig2.add_trace(go.Scatter(x=future_dates, y=forecast_mean.values, name='Forecasted Profit', mode='lines+markers', line=dict(color='orange', dash='dash')))
    fig2.add_trace(go.Scatter(x=future_dates, y=forecast_ci.iloc[:, 0], line=dict(width=0), showlegend=False))
    fig2.add_trace(go.Scatter(x=future_dates, y=forecast_ci.iloc[:, 1], fill='tonexty', fillcolor='rgba(255,165,0,0.2)', line=dict(width=0), name='Confidence Interval'))
    fig2.update_layout(xaxis_title='Date', yaxis_title='Profit ($)', template='plotly_white')
    st.plotly_chart(fig2, use_container_width=True)

    # Model-Based Prediction (XGBoost)
    st.subheader("Model Performance (XGBoost)")
    features = ['Customer_Footfall', 'Marketing_Spend', 'Food_Costs', 'Labor_Costs', 'Rent', 'Utilities', 'Revenue', 'Delivery_Ratio', 'DineIn_Ratio']
    X = df[features]
    y = df['Profit']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = XGBRegressor(random_state=42)
    param_grid = {'n_estimators': [100], 'learning_rate': [0.1], 'max_depth': [3]}
    grid = GridSearchCV(model, param_grid, cv=5, scoring='r2')
    grid.fit(X_train, y_train)
    best_model = grid.best_estimator_
    y_pred = best_model.predict(X_test)

    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    st.markdown(f"""
    - **MAE**: ${mae:,.2f}
    - **RMSE**: ${rmse:,.2f}
    - **R² Score**: {r2:.2f}

    The predictive model indicates moderate forecasting ability. While the R² score shows room for improvement, it's sufficient for directional insights. Improvements may be driven by better marketing strategy alignment and operational optimization.
    """)

    st.subheader("Strategic Recommendations")
    st.markdown("""
    - Invest in marketing during months where revenue traditionally dips.
    - Optimize labor and utility costs to reduce expense volatility.
    - Maintain customer engagement in non-peak seasons through loyalty programs.
    - Prepare for capital expenditures based on forecasted performance to avoid surprises.
    """)

